_______________________________________________________________________________________
_____________________________________             _____________________________________


+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
_______________________________________________________________________________________
__________________________________  something record  _________________________________

centOs 7: root password myroot
IP ADDR: 172.16.0.23
子网掩码: 255.255.0.0
网关: 172.16.0.1
DNS: 172.16.0.1

【samba.xw】http://samba.xw/samba/software/  IP：http://172.16.0.102/samba/software/

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
_______________________________________________________________________________________
_____________________________________   GO 开发   _____________________________________

go代码规范 https://github.com/golang-standards/project-layout/blob/master/README_zh.md
脚手架 https://go.pfgit.cn/letsgo/xwcli  后面新建模块用这个 
实际的模板代码 https://go.pfgit.cn/letsgo/xtplmodule

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
_______________________________________________________________________________________
______________________________________   go相关   _____________________________________

日志、db访问的封装 			https://go.pfgit.cn/letsgo/xdev
文档库 						https://go.pfgit.cn/
go开发环境  				http://wiki.xw/pages/viewpage.action?pageId=93555352
引入env(在main.go中添加)	_ "github.com/joho/godotenv/autoload"
防止跑到外网去				go env -w GOSUMDB=off

目录划分：
/cmd
/configs
	config.toml
/build
    xxx.guard
	xxx.xagent #可以没有
	install.conf
	private.conf
	run.sh
/test #可以没有
/docs #可以没有
/api  #对外http接口等，可以没有
/xxx  #根据业务功能划分的模块
module_build.sh

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
_______________________________________________________________________________________
____________________________________   日常开发   _____________________________________

平常开发或运维过程，要培养好的意识
1. 重复性工作，考虑是否能自动化
2. 容易出错的工作，考虑是否有方法变成不容易出错
3. 多个地方可能都会用到的代码，考虑是否封装或放公共库
4. 其他还有很多，所有的目的都是简化工作，提高效率

举些例子
1. ga1400里面配置读取，有的字段是要从sys_config读的， 这种明显很多模块会有的需求，要能意识到
2. 现场问题排查，经常性的要搜集些信息，可以考虑总结下一般要搜集哪些信息，是否能出个脚本，以后再出问题，让用脚本搜集信息反馈就行
3. 版本发布，重复性的从eagle pkg目录找要发布的包，手动发到samba

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
_______________________________________________________________________________________
________________________________   模块化开发注意事项   _______________________________
注意命名规范
	文件名、包名、类名、变量名，不应该用动词或动宾结构
	动词、动宾一般是函数
/build目录下
	private.conf 中存储 XW_MODULE_XXX、XW_XXX 式变量名
		export XW_XXX=xxxxxx
.toml中
	模块名意思明确
		[modu]
	变量名用单词下划线
		xxx_yyy_zzz
	需要在 private.conf 中指明的变量格式
		xxx_yyy="XW_XXX"
.env
	用来存储本地测试用变量，不受 private.conf控制
	一般格式
		moduXX.xxx_yyy=XXXXX

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+